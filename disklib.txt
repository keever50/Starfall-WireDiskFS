--@name DiskLib
--@author
--@shared
--@include netvar.txt
--@include async.txt

//Its recommended to use disks with hole set to 6 and precision anything above 1.
//Precision 1 causes wiremod to generate readable sectors on the disk edges. Also sector 0 cannot be found.

async = require("async.txt")
require("netvar.txt")
if SERVER then 
    //wire.adjustOutputs({"SpinSpeed"},{"Number"})
    DD = {}
    DD.MaxRotationSpeed = 2000
    DD.MaxUnitsPerSecond = 60  //Read speed. This is the same as sectors per second or X512 bytes per second. 
    //Do not set this higher than the server tickrate and a margin of 10 is recommended.
 

    DD.diskspeed = 0
    
    DD.HeadPos = 0
    wire.ports.SpinSpeed = 0
    DD.SpinDisk = function(disk, track) //RETURNS TARGET SPEED. Output this to a spin driver.
        //try(function()
            
            local UnitsPerRotation = 0 
            if track < disk.DiskTracks-1 then
                 UnitsPerRotation = disk.TrackSectors[track+1]-disk.TrackSectors[track]
            else
                 UnitsPerRotation = disk.DiskSectors -disk.TrackSectors[track]
                
            end
            DD.diskspeed = math.clamp( (( DD.MaxUnitsPerSecond * 1)/UnitsPerRotation)*360, 0, DD.MaxRotationSpeed)  
        //end)   
    end
    
    DD.InitSpinner = function( lock ) //Returns wirelink for the lock. Used for directly controlling it.
        async.thread.create(function()
            local spinner_sound = sounds.create(lock, "acf_extra/tankfx/turret5.wav")
            spinner_sound:play()
            while true do
                spinner_sound:setPitch(math.abs( lock:getAngleVelocity()[3]/30 ),0.05)
                lock:setAngleVelocity(Vector(0,0,DD.diskspeed))
                async.yield() 
            end      
        end):run()
        
        return lock:getWirelink()
    end
    
    DD.InitHead = function(head, base) //also returns wirelink for head. Used for directly controlling it.
        DD.HeadPos = 8
        async.thread.create(function()
            while true do
                head:setPos(base:getPos())
                head:setAngles(base:getAngles())        
                head:setAngles(head:localToWorldAngles(Angle(0,0,0)))  
                head:setPos(base:localToWorld(Vector(-DD.HeadPos,0,4)))                    
                async.yield()
            end
        end):run()
        async.wait(0.1)
        return wire.getWirelink(head)
    end
    
    
    
    DD.GotoTrack = function(disk, track)
        DD.HeadPos = disk.TrackPositions[track]   
        DD.SpinDisk(disk, track)
    end
    
    DD.GotoSector = function( disk, sector )
    
        DD.GotoTrack(disk, DD.FindSector(disk, sector))
        
    end    
        
    DD.FindSector = function(disk, sector)
        local track = 0

        for i=disk.FirstTrack, disk.DiskTracks, 1 do
            local sect = disk.TrackSectors[i] 
            if sect == nil then sect = disk.DiskSectors end
            --print(sect)
            if sect > sector then
                track = i-1 
                break  
            end
        end
        return track
    end
    
    DD.CalcDisk = function(DiskEnt, IRadius, Precision) //Returns disk information in table
            DiskSectors = 0
            TrackSectors = {}
            
               local min = DiskEnt:obbMins()
               local max = DiskEnt:obbMaxs()       
            local Size = DiskEnt:obbSize()
            
            DiskTracks = math.floor(0.5*math.min(max.x - min.x,max.y - min.y) / Precision)
            DiskStacks = math.max(1,math.floor((max.z - min.z) / Precision)+1)
            FirstTrack = math.floor((IRadius) / Precision)
            
            for i=FirstTrack,DiskTracks-1 do
                TrackSectors[i] = DiskSectors
                DiskSectors = DiskSectors + math.floor(2*3.1415926*i) + 1
            end    

            DiskVolume = DiskSectors*DiskStacks
            Disk = 
            {
                Precision=Precision,
                DiskTracks=DiskTracks,
                DiskStacks=DiskStacks,
                DiskSectors=DiskSectors,
                FirstTrack=FirstTrack,
                TrackSectors=TrackSectors, //key=track, value=global sector begin
                DiskVolume=DiskVolume,
                PhysicalSize=Size
            }
            
            
            
           //calculate positions
            Disk.TrackPositions={}
            for i=FirstTrack, DiskTracks-1 do
                Disk.TrackPositions[i] = DD.FindTrackPosition(Disk, i)
            end            
            
            return Disk
            
    end    
    
    DD.FindTrackPosition = function( disk, track )
        local r = math.floor(track * disk.Precision)
        r = r + (disk.Precision/1.5)
        local x = math.sqrt(r-0)^2
        return x
    end
    
    DD.GlobalSectorToLocal = function( disk, sector )
        lsector = sector-disk.TrackSectors[DD.FindSector( disk, sector )]
        return lsector
    end
    
    //Writing/Reading
    //HEAD IS WIRELINK
    //DISK IS A TABLE MADE BY CalcDisk(disk entity, hole size, precision)
    //Everything must be in a thread using the AERA_LIBS.async library. async.thread.create(function() code_here end)
    
    DD.ReadSector = function( head, disk, sector )
    
        DD.GotoSector( disk, sector ) 
    
        head[13]=DD.GlobalSectorToLocal(disk,sector)//local sector
        head[14]=DD.FindSector(disk, sector)//track
        head[12]=1//wait for track and sector
        head[8]=1 head[1]=1 head[0]=0//buffer read mode
    
        while head[2] != sector do async.yield() end //wait until sector is reached.
        
        local buffer = {}
        local k=0
        for i=512, 1024 do
            buffer[k]=head[i]
            k=k+1    
        end
        
        head[8]=0 head[1]=0 head[0]=0//buffer none mode
        
        return buffer
          
    end
    
    DD.WriteSector = function( head, disk, sector, array )
        
        local i = 512
        local i2 = 0
        for k,v in ipairs(array) do
            
            head[i]=array[i2]
            i=i+1  
            i2=i2+1      
        end
    
        DD.GotoSector( disk, sector ) 
        
        head[13]=DD.GlobalSectorToLocal(disk,sector)//local sector
        head[14]=DD.FindSector(disk, sector)//track
        head[12]=1//wait for track and sector
        head[8]=1 head[1]=0 head[0]=1//buffer write mode        
        
        while head[2] != sector do async.yield() end //wait until sector is reached.
        
        head[8]=0 head[1]=0 head[0]=0//buffer none mode
        
    end
    
    
    
    //All testing below
    --[[
    async.thread.create(function()
        
        head = DD.InitHead( wire.ports.Head, wire.ports.Base )
        --print( head[25] )
        disk = DD.CalcDisk( wire.ports.Disk, 6, head[25] )
        spinner = DD.InitSpinner( wire.ports.Lock ) 
        
        
        while true do
            for i=0, disk.DiskSectors-1 do
                --print(i)
                DD.WriteSector(head, disk, i, {2})
            end
            for i=0, disk.DiskSectors-1 do
                if DD.ReadSector(head, disk, i)[0] == 2 then
                
                else
                    print( "error at sector " .. i)
                end
            end
        end                 
    end):run()   
    

    --]]
    

    

    return DD

end
